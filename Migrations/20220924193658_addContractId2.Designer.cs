// <auto-generated />
using System;
using ContractFarming.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContractFarming.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220924193658_addContractId2")]
    partial class addContractId2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContractFarming.Models.Advertisment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvestmentCardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvestmentCardId")
                        .IsUnique();

                    b.ToTable("Advertisments");
                });

            modelBuilder.Entity("ContractFarming.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvestorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProducerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RepresentativeId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("InvestorId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProducerId");

                    b.HasIndex("RepresentativeId");

                    b.ToTable("Users","security");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("ContractFarming.Models.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ContractFarming.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AdminConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("ContractForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractRequestId")
                        .HasColumnType("int");

                    b.Property<string>("ContractTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleiveryWay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InvestorConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("InvestorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProducerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("QuantityUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quentity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RepresentativeId")
                        .HasColumnType("int");

                    b.Property<bool>("RequestStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SignatureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarrantyType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractRequestId")
                        .IsUnique();

                    b.HasIndex("InvestorId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RepresentativeId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("ContractFarming.Models.ContractRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ConfirmUser")
                        .HasColumnType("bit");

                    b.Property<string>("InvestmrntCardname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvestorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProducerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("StateAdmin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InvestorId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ContractRequests");
                });

            modelBuilder.Entity("ContractFarming.Models.ContractReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RatingScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReciptStatementId")
                        .HasColumnType("int");

                    b.Property<int?>("RepresentativeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReciptStatementId")
                        .IsUnique();

                    b.HasIndex("RepresentativeId");

                    b.ToTable("ContractReviews");
                });

            modelBuilder.Entity("ContractFarming.Models.Driver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarNo")
                        .HasColumnType("int");

                    b.Property<string>("CarOwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("ContractFarming.Models.Finance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("InvestorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("InvestorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Finances");
                });

            modelBuilder.Entity("ContractFarming.Models.Installment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Invoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProducerConfirm")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Installments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Installment");
                });

            modelBuilder.Entity("ContractFarming.Models.InstallmentReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstallmentId")
                        .HasColumnType("int");

                    b.Property<bool>("InstallmentType")
                        .HasColumnType("bit");

                    b.Property<string>("ProducerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RatingScore")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstallmentId")
                        .IsUnique();

                    b.HasIndex("ProducerId");

                    b.ToTable("InstallmentReviews");
                });

            modelBuilder.Entity("ContractFarming.Models.InvestmentCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProducerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProducerId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvestmentCards");
                });

            modelBuilder.Entity("ContractFarming.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dicrtorate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isolation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Village")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ContractFarming.Models.NotiUser", b =>
                {
                    b.Property<int>("NotiId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("ReadState")
                        .HasColumnType("bit");

                    b.HasKey("NotiId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("NotiUsers");
                });

            modelBuilder.Entity("ContractFarming.Models.Notification", b =>
                {
                    b.Property<int>("NotiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Close")
                        .HasColumnType("int");

                    b.Property<string>("NotiDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotiHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotiStatue")
                        .HasColumnType("bit");

                    b.HasKey("NotiId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ContractFarming.Models.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("ContractFarming.Models.ProducerReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RatingScore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RepresentativeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RepresentativeId");

                    b.ToTable("ProducerReviews");
                });

            modelBuilder.Entity("ContractFarming.Models.Producer_Driver", b =>
                {
                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProducerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DriverId", "ProducerId");

                    b.HasIndex("ProducerId");

                    b.ToTable("Producer_Drivers");
                });

            modelBuilder.Entity("ContractFarming.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArgiculturalLandMarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Classification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Climate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CostsPerKilo")
                        .HasColumnType("float");

                    b.Property<string>("Feasibility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodValueChain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrowingTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HarvestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductQuality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrategicPlan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ContractFarming.Models.Product_Investor", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("InvestorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId", "InvestorId");

                    b.HasIndex("InvestorId");

                    b.ToTable("Product_Investors");
                });

            modelBuilder.Entity("ContractFarming.Models.Product_Location", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("Product_Locations");
                });

            modelBuilder.Entity("ContractFarming.Models.Product_Season", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ProductId", "SeasonId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Prodcut_Seasons");
                });

            modelBuilder.Entity("ContractFarming.Models.ProductionSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActiveSubstance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("ProducerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Quntity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Substance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ProducerId");

                    b.ToTable("ProductionSupplies");
                });

            modelBuilder.Entity("ContractFarming.Models.ReciptStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<bool>("InvestorConfirm")
                        .HasColumnType("bit");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.HasIndex("WarehouseId");

                    b.ToTable("ReciptStatements");
                });

            modelBuilder.Entity("ContractFarming.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("ProducerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ProducerId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("ContractFarming.Models.Representative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("InvestorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("InvestorId");

                    b.ToTable("Representatives");
                });

            modelBuilder.Entity("ContractFarming.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("End_date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("ContractFarming.Models.Season_Price", b =>
                {
                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("PriceId")
                        .HasColumnType("int");

                    b.HasKey("SeasonId", "PriceId");

                    b.HasIndex("PriceId");

                    b.ToTable("Season_Prices");
                });

            modelBuilder.Entity("ContractFarming.Models.SeedInstructions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvailablePlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RangeOfPurity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("SeedInstructions");
                });

            modelBuilder.Entity("ContractFarming.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvestorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvestorId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles","security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims","security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims","security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins","security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles","security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens","security");
                });

            modelBuilder.Entity("ContractFarming.Models.Investor", b =>
                {
                    b.HasBaseType("ContractFarming.Models.ApplicationUser");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommercialRecordNo")
                        .HasColumnType("int");

                    b.Property<string>("CommercialRecordUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialType")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Investor");
                });

            modelBuilder.Entity("ContractFarming.Models.ManagmentStructure", b =>
                {
                    b.HasBaseType("ContractFarming.Models.ApplicationUser");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.HasIndex("LocationId");

                    b.HasDiscriminator().HasValue("ManagmentStructure");
                });

            modelBuilder.Entity("ContractFarming.Models.Producer", b =>
                {
                    b.HasBaseType("ContractFarming.Models.ApplicationUser");

                    b.Property<string>("FarmingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LandArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LocationId")
                        .HasColumnName("Producer_LocationId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfMember")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductionCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Production_Input")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("LocationId");

                    b.HasDiscriminator().HasValue("Producer");
                });

            modelBuilder.Entity("ContractFarming.Models.Financial_Installment", b =>
                {
                    b.HasBaseType("ContractFarming.Models.Installment");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstallmentReviewId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Financial_Installment");
                });

            modelBuilder.Entity("ContractFarming.Models.InKindInstallment", b =>
                {
                    b.HasBaseType("ContractFarming.Models.Installment");

                    b.Property<string>("ActiveSubstance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Substance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitPrice")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("InKindInstallment");
                });

            modelBuilder.Entity("ContractFarming.Models.Advertisment", b =>
                {
                    b.HasOne("ContractFarming.Models.InvestmentCard", "InvestmentCard")
                        .WithOne("Advertisment")
                        .HasForeignKey("ContractFarming.Models.Advertisment", "InvestmentCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractFarming.Models.ApplicationUser", b =>
                {
                    b.HasOne("ContractFarming.Models.Contract", null)
                        .WithMany("Users")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.Investor", null)
                        .WithMany("Users")
                        .HasForeignKey("InvestorId");

                    b.HasOne("ContractFarming.Models.Producer", null)
                        .WithMany("Users")
                        .HasForeignKey("ProducerId");

                    b.HasOne("ContractFarming.Models.Representative", null)
                        .WithMany("Users")
                        .HasForeignKey("RepresentativeId");
                });

            modelBuilder.Entity("ContractFarming.Models.Contract", b =>
                {
                    b.HasOne("ContractFarming.Models.ContractRequest", "ContractRequests")
                        .WithOne("Contracts")
                        .HasForeignKey("ContractFarming.Models.Contract", "ContractRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.Investor", "Investor")
                        .WithMany("Contracts")
                        .HasForeignKey("InvestorId");

                    b.HasOne("ContractFarming.Models.Producer", "Producer")
                        .WithMany("Contracts")
                        .HasForeignKey("ProducerId");

                    b.HasOne("ContractFarming.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ContractFarming.Models.Representative", null)
                        .WithMany("Contracts")
                        .HasForeignKey("RepresentativeId");
                });

            modelBuilder.Entity("ContractFarming.Models.ContractRequest", b =>
                {
                    b.HasOne("ContractFarming.Models.Investor", "Investor")
                        .WithMany()
                        .HasForeignKey("InvestorId");

                    b.HasOne("ContractFarming.Models.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId");

                    b.HasOne("ContractFarming.Models.Product", "product")
                        .WithMany("contractRequests")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractFarming.Models.ContractReview", b =>
                {
                    b.HasOne("ContractFarming.Models.ReciptStatement", "ReciptStatement")
                        .WithOne("ContractReview")
                        .HasForeignKey("ContractFarming.Models.ContractReview", "ReciptStatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.Representative", "Representative")
                        .WithMany("ContractReviews")
                        .HasForeignKey("RepresentativeId");
                });

            modelBuilder.Entity("ContractFarming.Models.Finance", b =>
                {
                    b.HasOne("ContractFarming.Models.Categories", "Categories")
                        .WithMany("Finances")
                        .HasForeignKey("CategoriesId");

                    b.HasOne("ContractFarming.Models.Investor", "investor")
                        .WithMany()
                        .HasForeignKey("InvestorId");

                    b.HasOne("ContractFarming.Models.Product", "product")
                        .WithMany("Finances")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractFarming.Models.Installment", b =>
                {
                    b.HasOne("ContractFarming.Models.Contract", "Contract")
                        .WithMany("Installments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractFarming.Models.InstallmentReview", b =>
                {
                    b.HasOne("ContractFarming.Models.Installment", "Installment")
                        .WithOne("InstallmentReview")
                        .HasForeignKey("ContractFarming.Models.InstallmentReview", "InstallmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.Producer", "Producer")
                        .WithMany("InstallmentReviews")
                        .HasForeignKey("ProducerId");
                });

            modelBuilder.Entity("ContractFarming.Models.InvestmentCard", b =>
                {
                    b.HasOne("ContractFarming.Models.Producer", "Producers")
                        .WithMany()
                        .HasForeignKey("ProducerId");

                    b.HasOne("ContractFarming.Models.Product", "Product")
                        .WithMany("InvestmentCards")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ContractFarming.Models.Location", b =>
                {
                    b.HasOne("ContractFarming.Models.Product", null)
                        .WithMany("Locations")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ContractFarming.Models.NotiUser", b =>
                {
                    b.HasOne("ContractFarming.Models.Notification", "Notification")
                        .WithMany("NotiUsers")
                        .HasForeignKey("NotiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.ApplicationUser", "User")
                        .WithMany("NotiUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractFarming.Models.Price", b =>
                {
                    b.HasOne("ContractFarming.Models.Product", "Product")
                        .WithMany("Prices")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ContractFarming.Models.ProducerReview", b =>
                {
                    b.HasOne("ContractFarming.Models.Representative", "Representative")
                        .WithMany("ProducerReviews")
                        .HasForeignKey("RepresentativeId");
                });

            modelBuilder.Entity("ContractFarming.Models.Producer_Driver", b =>
                {
                    b.HasOne("ContractFarming.Models.Driver", "Driver")
                        .WithMany("Producer_Drivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.Producer", "Producer")
                        .WithMany("Producer_Drivers")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractFarming.Models.Product", b =>
                {
                    b.HasOne("ContractFarming.Models.Categories", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoriesId");
                });

            modelBuilder.Entity("ContractFarming.Models.Product_Investor", b =>
                {
                    b.HasOne("ContractFarming.Models.Investor", "Investor")
                        .WithMany("Product_Investors")
                        .HasForeignKey("InvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.Product", "Product")
                        .WithMany("Product_Investors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractFarming.Models.Product_Location", b =>
                {
                    b.HasOne("ContractFarming.Models.Location", "Location")
                        .WithMany("Product_Locations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.Product", "Product")
                        .WithMany("Product_Locations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractFarming.Models.Product_Season", b =>
                {
                    b.HasOne("ContractFarming.Models.Product", "Product")
                        .WithMany("Product_Seasons")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.Season", "Season")
                        .WithMany("Product_Seasons")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractFarming.Models.ProductionSupply", b =>
                {
                    b.HasOne("ContractFarming.Models.Contract", "Contract")
                        .WithMany("ProductionSupplies")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.Producer", "Producer")
                        .WithMany("ProductionSupplies")
                        .HasForeignKey("ProducerId");
                });

            modelBuilder.Entity("ContractFarming.Models.ReciptStatement", b =>
                {
                    b.HasOne("ContractFarming.Models.Contract", "Contract")
                        .WithOne("ReciptStatement")
                        .HasForeignKey("ContractFarming.Models.ReciptStatement", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.Warehouse", "Warehouse")
                        .WithMany("ReciptStatements")
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("ContractFarming.Models.Report", b =>
                {
                    b.HasOne("ContractFarming.Models.Contract", "Contract")
                        .WithMany("Reports")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.Producer", "Producer")
                        .WithMany("Reports")
                        .HasForeignKey("ProducerId");
                });

            modelBuilder.Entity("ContractFarming.Models.Representative", b =>
                {
                    b.HasOne("ContractFarming.Models.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.Investor", "Investor")
                        .WithMany("Representatives")
                        .HasForeignKey("InvestorId");
                });

            modelBuilder.Entity("ContractFarming.Models.Season", b =>
                {
                    b.HasOne("ContractFarming.Models.Product", null)
                        .WithMany("Seasons")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ContractFarming.Models.Season_Price", b =>
                {
                    b.HasOne("ContractFarming.Models.Price", "Price")
                        .WithMany("Season_Prices")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.Season", "Season")
                        .WithMany("Season_Prices")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractFarming.Models.SeedInstructions", b =>
                {
                    b.HasOne("ContractFarming.Models.ApplicationUser", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("ContractFarming.Models.Warehouse", b =>
                {
                    b.HasOne("ContractFarming.Models.Investor", "Investor")
                        .WithMany("Warehouses")
                        .HasForeignKey("InvestorId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ContractFarming.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ContractFarming.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractFarming.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ContractFarming.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractFarming.Models.ManagmentStructure", b =>
                {
                    b.HasOne("ContractFarming.Models.Location", "Location")
                        .WithMany("ManagmentStructures")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("ContractFarming.Models.Producer", b =>
                {
                    b.HasOne("ContractFarming.Models.Location", "Location")
                        .WithMany("Producers")
                        .HasForeignKey("LocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
